/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.co.sena.tiendaenlinea.integracion.dao;

import edu.co.sena.tiendaenlinea.integracion.dto.*;
import edu.co.sena.tiendaenlinea.integracion.exceptions.*;

public interface DomicilioProveedorDao
{
	/** 
	 * Inserts a new row in the domicilio_proveedor table.
	 */
	public DomicilioProveedorPk insert(DomicilioProveedor dto) throws DomicilioProveedorDaoException;

	/** 
	 * Updates a single row in the domicilio_proveedor table.
	 */
	public void update(DomicilioProveedorPk pk, DomicilioProveedor dto) throws DomicilioProveedorDaoException;

	/** 
	 * Deletes a single row in the domicilio_proveedor table.
	 */
	public void delete(DomicilioProveedorPk pk) throws DomicilioProveedorDaoException;

	/** 
	 * Returns the rows from the domicilio_proveedor table that matches the specified primary-key value.
	 */
	public DomicilioProveedor findByPrimaryKey(DomicilioProveedorPk pk) throws DomicilioProveedorDaoException;

	/** 
	 * Returns all rows from the domicilio_proveedor table that match the criteria 'Proveedor_idProveedor = :proveedorIdproveedor AND Proveedor_tipoDeIdentificacion = :proveedorTipodeidentificacion'.
	 */
	public DomicilioProveedor findByPrimaryKey(String proveedorIdproveedor, String proveedorTipodeidentificacion) throws DomicilioProveedorDaoException;

	/** 
	 * Returns all rows from the domicilio_proveedor table that match the criteria ''.
	 */
	public DomicilioProveedor[] findAll() throws DomicilioProveedorDaoException;

	/** 
	 * Returns all rows from the domicilio_proveedor table that match the criteria 'Municipio_idMunicipio = :municipioIdmunicipio'.
	 */
	public DomicilioProveedor[] findByMunicipio(String municipioIdmunicipio) throws DomicilioProveedorDaoException;

	/** 
	 * Returns all rows from the domicilio_proveedor table that match the criteria 'Proveedor_idProveedor = :proveedorIdproveedor AND Proveedor_tipoDeIdentificacion = :proveedorTipodeidentificacion'.
	 */
	public DomicilioProveedor[] findByProveedor(String proveedorIdproveedor, String proveedorTipodeidentificacion) throws DomicilioProveedorDaoException;

	/** 
	 * Returns all rows from the domicilio_proveedor table that match the criteria 'Proveedor_idProveedor = :proveedorIdproveedor'.
	 */
	public DomicilioProveedor[] findWhereProveedorIdproveedorEquals(String proveedorIdproveedor) throws DomicilioProveedorDaoException;

	/** 
	 * Returns all rows from the domicilio_proveedor table that match the criteria 'Proveedor_tipoDeIdentificacion = :proveedorTipodeidentificacion'.
	 */
	public DomicilioProveedor[] findWhereProveedorTipodeidentificacionEquals(String proveedorTipodeidentificacion) throws DomicilioProveedorDaoException;

	/** 
	 * Returns all rows from the domicilio_proveedor table that match the criteria 'telefono = :telefono'.
	 */
	public DomicilioProveedor[] findWhereTelefonoEquals(String telefono) throws DomicilioProveedorDaoException;

	/** 
	 * Returns all rows from the domicilio_proveedor table that match the criteria 'direccion = :direccion'.
	 */
	public DomicilioProveedor[] findWhereDireccionEquals(String direccion) throws DomicilioProveedorDaoException;

	/** 
	 * Returns all rows from the domicilio_proveedor table that match the criteria 'barrio = :barrio'.
	 */
	public DomicilioProveedor[] findWhereBarrioEquals(String barrio) throws DomicilioProveedorDaoException;

	/** 
	 * Returns all rows from the domicilio_proveedor table that match the criteria 'localidad = :localidad'.
	 */
	public DomicilioProveedor[] findWhereLocalidadEquals(String localidad) throws DomicilioProveedorDaoException;

	/** 
	 * Returns all rows from the domicilio_proveedor table that match the criteria 'Municipio_idMunicipio = :municipioIdmunicipio'.
	 */
	public DomicilioProveedor[] findWhereMunicipioIdmunicipioEquals(String municipioIdmunicipio) throws DomicilioProveedorDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the domicilio_proveedor table that match the specified arbitrary SQL statement
	 */
	public DomicilioProveedor[] findByDynamicSelect(String sql, Object[] sqlParams) throws DomicilioProveedorDaoException;

	/** 
	 * Returns all rows from the domicilio_proveedor table that match the specified arbitrary SQL statement
	 */
	public DomicilioProveedor[] findByDynamicWhere(String sql, Object[] sqlParams) throws DomicilioProveedorDaoException;

}
