/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.co.sena.tiendaenlinea.integracion.dao;

import edu.co.sena.tiendaenlinea.integracion.dto.*;
import edu.co.sena.tiendaenlinea.integracion.exceptions.*;

public interface DomicilioCuentaDao
{
	/** 
	 * Inserts a new row in the domicilio_cuenta table.
	 */
	public DomicilioCuentaPk insert(DomicilioCuenta dto) throws DomicilioCuentaDaoException;

	/** 
	 * Updates a single row in the domicilio_cuenta table.
	 */
	public void update(DomicilioCuentaPk pk, DomicilioCuenta dto) throws DomicilioCuentaDaoException;

	/** 
	 * Deletes a single row in the domicilio_cuenta table.
	 */
	public void delete(DomicilioCuentaPk pk) throws DomicilioCuentaDaoException;

	/** 
	 * Returns the rows from the domicilio_cuenta table that matches the specified primary-key value.
	 */
	public DomicilioCuenta findByPrimaryKey(DomicilioCuentaPk pk) throws DomicilioCuentaDaoException;

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the criteria 'Cuenta_tipoDocumento = :cuentaTipodocumento AND Cuenta_numeroDocumento = :cuentaNumerodocumento'.
	 */
	public DomicilioCuenta findByPrimaryKey(String cuentaTipodocumento, String cuentaNumerodocumento) throws DomicilioCuentaDaoException;

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the criteria ''.
	 */
	public DomicilioCuenta[] findAll() throws DomicilioCuentaDaoException;

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the criteria 'Cuenta_tipoDocumento = :cuentaTipodocumento AND Cuenta_numeroDocumento = :cuentaNumerodocumento'.
	 */
	public DomicilioCuenta[] findByCuenta(String cuentaTipodocumento, String cuentaNumerodocumento) throws DomicilioCuentaDaoException;

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the criteria 'Municipio_idMunicipio = :municipioIdmunicipio'.
	 */
	public DomicilioCuenta[] findByMunicipio(String municipioIdmunicipio) throws DomicilioCuentaDaoException;

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the criteria 'Cuenta_tipoDocumento = :cuentaTipodocumento'.
	 */
	public DomicilioCuenta[] findWhereCuentaTipodocumentoEquals(String cuentaTipodocumento) throws DomicilioCuentaDaoException;

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the criteria 'Cuenta_numeroDocumento = :cuentaNumerodocumento'.
	 */
	public DomicilioCuenta[] findWhereCuentaNumerodocumentoEquals(String cuentaNumerodocumento) throws DomicilioCuentaDaoException;

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the criteria 'telefono = :telefono'.
	 */
	public DomicilioCuenta[] findWhereTelefonoEquals(String telefono) throws DomicilioCuentaDaoException;

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the criteria 'direccion = :direccion'.
	 */
	public DomicilioCuenta[] findWhereDireccionEquals(String direccion) throws DomicilioCuentaDaoException;

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the criteria 'barrio = :barrio'.
	 */
	public DomicilioCuenta[] findWhereBarrioEquals(String barrio) throws DomicilioCuentaDaoException;

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the criteria 'localidad = :localidad'.
	 */
	public DomicilioCuenta[] findWhereLocalidadEquals(String localidad) throws DomicilioCuentaDaoException;

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the criteria 'Municipio_idMunicipio = :municipioIdmunicipio'.
	 */
	public DomicilioCuenta[] findWhereMunicipioIdmunicipioEquals(String municipioIdmunicipio) throws DomicilioCuentaDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the specified arbitrary SQL statement
	 */
	public DomicilioCuenta[] findByDynamicSelect(String sql, Object[] sqlParams) throws DomicilioCuentaDaoException;

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the specified arbitrary SQL statement
	 */
	public DomicilioCuenta[] findByDynamicWhere(String sql, Object[] sqlParams) throws DomicilioCuentaDaoException;

}
