/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.co.sena.tiendaenlinea.integracion.jdbc;

import edu.co.sena.tiendaenlinea.integracion.dao.*;
import edu.co.sena.tiendaenlinea.integracion.factory.*;
import edu.co.sena.tiendaenlinea.integracion.dto.*;
import edu.co.sena.tiendaenlinea.integracion.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class DomicilioCuentaDaoImpl extends AbstractDAO implements DomicilioCuentaDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT Cuenta_tipoDocumento, Cuenta_numeroDocumento, telefono, direccion, barrio, localidad, Municipio_idMunicipio FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( Cuenta_tipoDocumento, Cuenta_numeroDocumento, telefono, direccion, barrio, localidad, Municipio_idMunicipio ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET Cuenta_tipoDocumento = ?, Cuenta_numeroDocumento = ?, telefono = ?, direccion = ?, barrio = ?, localidad = ?, Municipio_idMunicipio = ? WHERE Cuenta_tipoDocumento = ? AND Cuenta_numeroDocumento = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE Cuenta_tipoDocumento = ? AND Cuenta_numeroDocumento = ?";

	/** 
	 * Index of column Cuenta_tipoDocumento
	 */
	protected static final int COLUMN_CUENTA_TIPODOCUMENTO = 1;

	/** 
	 * Index of column Cuenta_numeroDocumento
	 */
	protected static final int COLUMN_CUENTA_NUMERODOCUMENTO = 2;

	/** 
	 * Index of column telefono
	 */
	protected static final int COLUMN_TELEFONO = 3;

	/** 
	 * Index of column direccion
	 */
	protected static final int COLUMN_DIRECCION = 4;

	/** 
	 * Index of column barrio
	 */
	protected static final int COLUMN_BARRIO = 5;

	/** 
	 * Index of column localidad
	 */
	protected static final int COLUMN_LOCALIDAD = 6;

	/** 
	 * Index of column Municipio_idMunicipio
	 */
	protected static final int COLUMN_MUNICIPIO_IDMUNICIPIO = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Index of primary-key column Cuenta_tipoDocumento
	 */
	protected static final int PK_COLUMN_CUENTA_TIPODOCUMENTO = 1;

	/** 
	 * Index of primary-key column Cuenta_numeroDocumento
	 */
	protected static final int PK_COLUMN_CUENTA_NUMERODOCUMENTO = 2;

	/** 
	 * Inserts a new row in the domicilio_cuenta table.
	 */
	public DomicilioCuentaPk insert(DomicilioCuenta dto) throws DomicilioCuentaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getCuentaTipodocumento() );
			stmt.setString( index++, dto.getCuentaNumerodocumento() );
			stmt.setString( index++, dto.getTelefono() );
			stmt.setString( index++, dto.getDireccion() );
			stmt.setString( index++, dto.getBarrio() );
			stmt.setString( index++, dto.getLocalidad() );
			stmt.setString( index++, dto.getMunicipioIdmunicipio() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DomicilioCuentaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the domicilio_cuenta table.
	 */
	public void update(DomicilioCuentaPk pk, DomicilioCuenta dto) throws DomicilioCuentaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getCuentaTipodocumento() );
			stmt.setString( index++, dto.getCuentaNumerodocumento() );
			stmt.setString( index++, dto.getTelefono() );
			stmt.setString( index++, dto.getDireccion() );
			stmt.setString( index++, dto.getBarrio() );
			stmt.setString( index++, dto.getLocalidad() );
			stmt.setString( index++, dto.getMunicipioIdmunicipio() );
			stmt.setString( 8, pk.getCuentaTipodocumento() );
			stmt.setString( 9, pk.getCuentaNumerodocumento() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DomicilioCuentaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the domicilio_cuenta table.
	 */
	public void delete(DomicilioCuentaPk pk) throws DomicilioCuentaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getCuentaTipodocumento() );
			stmt.setString( 2, pk.getCuentaNumerodocumento() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DomicilioCuentaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the domicilio_cuenta table that matches the specified primary-key value.
	 */
	public DomicilioCuenta findByPrimaryKey(DomicilioCuentaPk pk) throws DomicilioCuentaDaoException
	{
		return findByPrimaryKey( pk.getCuentaTipodocumento(), pk.getCuentaNumerodocumento() );
	}

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the criteria 'Cuenta_tipoDocumento = :cuentaTipodocumento AND Cuenta_numeroDocumento = :cuentaNumerodocumento'.
	 */
	public DomicilioCuenta findByPrimaryKey(String cuentaTipodocumento, String cuentaNumerodocumento) throws DomicilioCuentaDaoException
	{
		DomicilioCuenta ret[] = findByDynamicSelect( SQL_SELECT + " WHERE Cuenta_tipoDocumento = ? AND Cuenta_numeroDocumento = ?", new Object[] { cuentaTipodocumento, cuentaNumerodocumento } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the criteria ''.
	 */
	public DomicilioCuenta[] findAll() throws DomicilioCuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY Cuenta_tipoDocumento, Cuenta_numeroDocumento", null );
	}

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the criteria 'Cuenta_tipoDocumento = :cuentaTipodocumento AND Cuenta_numeroDocumento = :cuentaNumerodocumento'.
	 */
	public DomicilioCuenta[] findByCuenta(String cuentaTipodocumento, String cuentaNumerodocumento) throws DomicilioCuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Cuenta_tipoDocumento = ? AND Cuenta_numeroDocumento = ?", new Object[] { cuentaTipodocumento, cuentaNumerodocumento } );
	}

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the criteria 'Municipio_idMunicipio = :municipioIdmunicipio'.
	 */
	public DomicilioCuenta[] findByMunicipio(String municipioIdmunicipio) throws DomicilioCuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Municipio_idMunicipio = ?", new Object[] { municipioIdmunicipio } );
	}

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the criteria 'Cuenta_tipoDocumento = :cuentaTipodocumento'.
	 */
	public DomicilioCuenta[] findWhereCuentaTipodocumentoEquals(String cuentaTipodocumento) throws DomicilioCuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Cuenta_tipoDocumento = ? ORDER BY Cuenta_tipoDocumento", new Object[] { cuentaTipodocumento } );
	}

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the criteria 'Cuenta_numeroDocumento = :cuentaNumerodocumento'.
	 */
	public DomicilioCuenta[] findWhereCuentaNumerodocumentoEquals(String cuentaNumerodocumento) throws DomicilioCuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Cuenta_numeroDocumento = ? ORDER BY Cuenta_numeroDocumento", new Object[] { cuentaNumerodocumento } );
	}

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the criteria 'telefono = :telefono'.
	 */
	public DomicilioCuenta[] findWhereTelefonoEquals(String telefono) throws DomicilioCuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE telefono = ? ORDER BY telefono", new Object[] { telefono } );
	}

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the criteria 'direccion = :direccion'.
	 */
	public DomicilioCuenta[] findWhereDireccionEquals(String direccion) throws DomicilioCuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE direccion = ? ORDER BY direccion", new Object[] { direccion } );
	}

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the criteria 'barrio = :barrio'.
	 */
	public DomicilioCuenta[] findWhereBarrioEquals(String barrio) throws DomicilioCuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE barrio = ? ORDER BY barrio", new Object[] { barrio } );
	}

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the criteria 'localidad = :localidad'.
	 */
	public DomicilioCuenta[] findWhereLocalidadEquals(String localidad) throws DomicilioCuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE localidad = ? ORDER BY localidad", new Object[] { localidad } );
	}

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the criteria 'Municipio_idMunicipio = :municipioIdmunicipio'.
	 */
	public DomicilioCuenta[] findWhereMunicipioIdmunicipioEquals(String municipioIdmunicipio) throws DomicilioCuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Municipio_idMunicipio = ? ORDER BY Municipio_idMunicipio", new Object[] { municipioIdmunicipio } );
	}

	/**
	 * Method 'DomicilioCuentaDaoImpl'
	 * 
	 */
	public DomicilioCuentaDaoImpl()
	{
	}

	/**
	 * Method 'DomicilioCuentaDaoImpl'
	 * 
	 * @param userConn
	 */
	public DomicilioCuentaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "tiendaenlinea.domicilio_cuenta";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected DomicilioCuenta fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			DomicilioCuenta dto = new DomicilioCuenta();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected DomicilioCuenta[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			DomicilioCuenta dto = new DomicilioCuenta();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		DomicilioCuenta ret[] = new DomicilioCuenta[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(DomicilioCuenta dto, ResultSet rs) throws SQLException
	{
		dto.setCuentaTipodocumento( rs.getString( COLUMN_CUENTA_TIPODOCUMENTO ) );
		dto.setCuentaNumerodocumento( rs.getString( COLUMN_CUENTA_NUMERODOCUMENTO ) );
		dto.setTelefono( rs.getString( COLUMN_TELEFONO ) );
		dto.setDireccion( rs.getString( COLUMN_DIRECCION ) );
		dto.setBarrio( rs.getString( COLUMN_BARRIO ) );
		dto.setLocalidad( rs.getString( COLUMN_LOCALIDAD ) );
		dto.setMunicipioIdmunicipio( rs.getString( COLUMN_MUNICIPIO_IDMUNICIPIO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(DomicilioCuenta dto)
	{
	}

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the specified arbitrary SQL statement
	 */
	public DomicilioCuenta[] findByDynamicSelect(String sql, Object[] sqlParams) throws DomicilioCuentaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DomicilioCuentaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the domicilio_cuenta table that match the specified arbitrary SQL statement
	 */
	public DomicilioCuenta[] findByDynamicWhere(String sql, Object[] sqlParams) throws DomicilioCuentaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DomicilioCuentaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
